{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import layers, models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "11493376/11490434 [==============================] - 12s 1us/step\n"
     ]
    }
   ],
   "source": [
    "mnist = keras.datasets.mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Train images : (60000, 28, 28)\n",
      "Shape of Train labels :  (60000,)\n",
      "\n",
      "Shape of Test images :  (10000, 28, 28)\n",
      "Shape of Test labels :  (10000,)\n"
     ]
    }
   ],
   "source": [
    "print('Shape of Train images :',train_images.shape)\n",
    "print('Shape of Train labels : ', train_labels.shape)\n",
    "print('\\nShape of Test images : ', test_images.shape)\n",
    "print(\"Shape of Test labels : \",test_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train labels :  [5 0 4 ... 5 6 8]\n"
     ]
    }
   ],
   "source": [
    "print('Train labels : ',train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  51 159 253\n",
      "  159  50   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0  48 238 252 252\n",
      "  252 237   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0  54 227 253 252 239\n",
      "  233 252  57   6   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0  10  60 224 252 253 252 202\n",
      "   84 252 253 122   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0 163 252 252 252 253 252 252\n",
      "   96 189 253 167   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0  51 238 253 253 190 114 253 228\n",
      "   47  79 255 168   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0  48 238 252 252 179  12  75 121  21\n",
      "    0   0 253 243  50   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0  38 165 253 233 208  84   0   0   0   0\n",
      "    0   0 253 252 165   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   7 178 252 240  71  19  28   0   0   0   0\n",
      "    0   0 253 252 195   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0  57 252 252  63   0   0   0   0   0   0   0\n",
      "    0   0 253 252 195   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0 198 253 190   0   0   0   0   0   0   0   0\n",
      "    0   0 255 253 196   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  76 246 252 112   0   0   0   0   0   0   0   0\n",
      "    0   0 253 252 148   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  85 252 230  25   0   0   0   0   0   0   0   0\n",
      "    7 135 253 186  12   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  85 252 223   0   0   0   0   0   0   0   0   7\n",
      "  131 252 225  71   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  85 252 145   0   0   0   0   0   0   0  48 165\n",
      "  252 173   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  86 253 225   0   0   0   0   0   0 114 238 253\n",
      "  162   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  85 252 249 146  48  29  85 178 225 253 223 167\n",
      "   56   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  85 252 252 252 229 215 252 252 252 196 130   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0  28 199 252 252 253 252 252 233 145   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0  25 128 252 253 252 141  37   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
      "    0   0   0   0   0   0   0   0   0   0]]\n"
     ]
    }
   ],
   "source": [
    "print(train_images[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 10 Train images in MNIST dataset\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train labels match with Train label sequentialy\n",
      " [5 0 4 1 9 2 1 3 1 4]\n"
     ]
    }
   ],
   "source": [
    "print('First 10 Train images in MNIST dataset\\n')\n",
    "for i in range(10):\n",
    "    plt.subplot(1, 10, i+1)\n",
    "    plt.xticks([])\n",
    "    plt.yticks([])\n",
    "    plt.imshow(train_images[i])\n",
    "plt.show()\n",
    "print('\\nTrain labels match with Train label sequentialy\\n',train_labels[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images = tf.reshape(train_images, [-1, 28, 28, 1])\n",
    "test_images = tf.reshape(test_images, [-1, 28, 28, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def select_model(model_number):\n",
    "    if model_number == 1:\n",
    "        model = keras.models.Sequential([\n",
    "                    keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (28, 28,1)),  # layer 1 \n",
    "                    keras.layers.MaxPool2D((2,2)),                                                  # layer 2 \n",
    "                    keras.layers.Flatten(),\n",
    "                    keras.layers.Dense(10, activation = 'softmax')])                                # layer 3\n",
    "\n",
    "    if model_number == 2:\n",
    "        model = keras.models.Sequential([\n",
    "                    keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape=(28,28,1)),     # layer 1 \n",
    "                    keras.layers.MaxPool2D((2,2)),                                                  # layer 2\n",
    "                    keras.layers.Conv2D(64, (3,3), activation = 'relu'),                            # layer 3 \n",
    "                    keras.layers.MaxPool2D((2,2)),                                                  # layer 4\n",
    "                    keras.layers.Flatten(),\n",
    "                    keras.layers.Dense(10, activation = 'softmax')])                                # layer 5\n",
    "                    \n",
    "    if model_number == 3: \n",
    "        model = keras.models.Sequential([\n",
    "                    keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (28, 28,1)),  # layer 1\n",
    "                    keras.layers.MaxPool2D((2,2)),                                                  # layer 2\n",
    "                    keras.layers.Conv2D(64, (3,3), activation = 'relu'),                            # layer 3\n",
    "                    keras.layers.Conv2D(64, (3,3), activation = 'relu'),                            # layer 4\n",
    "                    keras.layers.MaxPool2D((2,2)),                                                  # layer 5\n",
    "                    keras.layers.Conv2D(128, (3,3), activation = 'relu'),                           # layer 6\n",
    "                    keras.layers.Flatten(),\n",
    "                    keras.layers.Dense(10, activation = 'softmax')])                                # layer 7\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = select_model(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 26, 26, 32)        320       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 13, 13, 32)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 5408)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 10)                54090     \n",
      "=================================================================\n",
      "Total params: 54,410\n",
      "Trainable params: 54,410\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    optimizer = 'adam',\n",
    "    loss = 'sparse_categorical_crossentropy',\n",
    "    metrics = ['accuracy']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples\n",
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 42s 701us/sample - loss: 0.6229 - accuracy: 0.9399\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 50s 835us/sample - loss: 0.0868 - accuracy: 0.9746\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 40s 661us/sample - loss: 0.0682 - accuracy: 0.9796\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 56s 929us/sample - loss: 0.0645 - accuracy: 0.9809\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 49s 820us/sample - loss: 0.0558 - accuracy: 0.9824\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x19ac8634048>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_images, train_labels,  epochs = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/1 - 2s - loss: 0.1200 - accuracy: 0.9740\n",
      "\n",
      "Test loss :  0.11552886739432433\n",
      "Test accuracy : 0.974\n"
     ]
    }
   ],
   "source": [
    "test_loss, accuracy = model.evaluate(test_images, test_labels, verbose = 2)\n",
    "print('\\nTest loss : ', test_loss)\n",
    "print('Test accuracy :', accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_images = tf.cast(test_images, tf.float32)\n",
    "pred = model.predict(test_images)\n",
    "Number = [0,1,2,3,4,5,6,7,8,9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction :  (10000, 10)\n",
      "Test labels :  (10000,)\n"
     ]
    }
   ],
   "source": [
    "print('Prediction : ', pred.shape)\n",
    "print('Test labels : ', test_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_image(i, predictions_array, true_label, img):\n",
    "  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]\n",
    "  plt.grid(False)\n",
    "  plt.xticks([])\n",
    "  plt.yticks([])\n",
    "\n",
    "  plt.imshow(img, cmap=plt.cm.binary)\n",
    "\n",
    "  predicted_label = np.argmax(predictions_array)\n",
    "  if predicted_label == true_label:\n",
    "    color = 'blue'\n",
    "  else:\n",
    "    color = 'red'\n",
    "\n",
    "  plt.xlabel(\"{} {:2.0f}% ({})\".format(Number[predicted_label],\n",
    "                                100*np.max(predictions_array),\n",
    "                                Number[true_label]),\n",
    "                                color=color)\n",
    "\n",
    "def plot_value_array(i, predictions_array, true_label):\n",
    "  predictions_array, true_label = predictions_array[i], true_label[i]\n",
    "  plt.grid(False)\n",
    "  plt.xticks([])\n",
    "  plt.yticks([])\n",
    "  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
    "  plt.ylim([0, 1])\n",
    "  predicted_label = np.argmax(predictions_array)\n",
    "  plt.xticks(Number)\n",
    "\n",
    "  thisplot[predicted_label].set_color('red')\n",
    "  thisplot[true_label].set_color('blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "i = 1\n",
    "plt.figure(figsize=(6,3))\n",
    "plt.subplot(1,2,1)\n",
    "plot_image(i, pred, test_labels, test_images)\n",
    "plt.subplot(1,2,2)\n",
    "plot_value_array(i, pred,  test_labels)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_rows = 5\n",
    "num_cols = 3\n",
    "num_images = num_rows*num_cols\n",
    "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
    "for i in range(num_images):\n",
    "  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
    "  plot_image(i, pred, test_labels, test_images)\n",
    "  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
    "  plot_value_array(i, pred, test_labels)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def error_mnist(prediction_array, true_label):\n",
    "    error_index = []\n",
    "    \n",
    "    for i in range(true_label.shape[0]):\n",
    "        if np.argmax(prediction_array[i]) != true_label[i]:\n",
    "            error_index.append(i)\n",
    "    return error_index\n",
    "\n",
    "# change num_cols, num_rows if you want to see more result.  \n",
    "def plot_error(index, prediction_array, true_label):\n",
    "    num_cols = 5\n",
    "    num_rows = 5\n",
    "    plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
    "\n",
    "    assert len(index) < num_cols * num_rows\n",
    "    for i in range(len(index)):\n",
    "        plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
    "        idx = index[i]\n",
    "        plt.imshow(test_images[idx])\n",
    "        plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
    "        plt.bar(range(10), prediction_array[idx])\n",
    "        plt.xticks(Number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[139, 175, 282, 321, 406, 445, 495, 508, 543, 552]\n"
     ]
    }
   ],
   "source": [
    "index = error_mnist(pred, test_labels)\n",
    "index_slice = index[:10]\n",
    "print(index[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_error(index_slice, pred, test_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'DONE' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-33-87f6c984fac4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mDONE\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'DONE' is not defined"
     ]
    }
   ],
   "source": [
    "DONE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
